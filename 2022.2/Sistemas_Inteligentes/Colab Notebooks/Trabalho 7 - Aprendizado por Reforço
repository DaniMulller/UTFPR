{"cells":[{"cell_type":"markdown","metadata":{"id":"F_racQlQSna5"},"source":["**Alunos:**\n","*   Daniel Augusto Muller\n","*   Luan Escudeiro"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24886,"status":"ok","timestamp":1670518771229,"user":{"displayName":"DANIEL AUGUSTO MULLER","userId":"11187782989166260607"},"user_tz":180},"id":"uAlauuJsSEiX","outputId":"ac3526f3-b489-412a-ac31-23850cda231a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"VSxNvLKHzg6p","executionInfo":{"status":"ok","timestamp":1670518773223,"user_tz":180,"elapsed":2005,"user":{"displayName":"DANIEL AUGUSTO MULLER","userId":"11187782989166260607"}}},"outputs":[],"source":["import numpy as np\n","from random import random\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from matplotlib.pyplot import figure\n","from sklearn.preprocessing import StandardScaler"]},{"cell_type":"markdown","metadata":{"id":"o83_IqnoYvlA"},"source":["**Preparing BodyFatness Dataset with Weight and Abdomen Circumference**"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"nAOyTnVGThWS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1670518774391,"user_tz":180,"elapsed":1177,"user":{"displayName":"DANIEL AUGUSTO MULLER","userId":"11187782989166260607"}},"outputId":"f1c73d9d-35fd-433a-af84-80fe24150e6b"},"outputs":[{"output_type":"stream","name":"stdout","text":["X: (252, 2) \n","Weight(kg) Abdomen(cm)\n"," [[ 69.95  85.2 ]\n"," [ 78.57  83.  ]\n"," [ 69.84  87.9 ]\n"," [ 83.79  86.4 ]\n"," [ 83.56 100.  ]] ...\n","\n","y_true: (252,) \n"," Body Fatness(%)\n"," [12.3  6.1 25.3 10.4 28.7] ...\n"]}],"source":["df = pd.read_csv('/content/drive/MyDrive/UTFPR/Períodos/2022.2/Sistemas_Inteligentes/Colab Notebooks/bodyfat.csv')\n","\n","df['Weight'] = df['Weight'].div(2.205).round(2) #lbs to kg\n","#print(df.head()) #252 samples\n","\n","X = df.iloc[:,[3,7]].values #all rows but only columns Weight(kg) and Abdomen Circumference(cm)\n","print(\"X:\",X.shape,\"\\nWeight(kg) Abdomen(cm)\\n\",X[:5],\"...\") #ispection of first 5 rows\n","y_true = df['BodyFat'].values\n","print(\"\\ny_true:\",y_true.shape,\"\\n Body Fatness(%)\\n\",y_true[:5],\"...\")\n","y_true = np.asarray(y_true.reshape(252,1))\n","X1 = X[:,0]\n","X2 = X[:,1]"]},{"cell_type":"markdown","source":["**Exemplo 1 Slide**"],"metadata":{"id":"VSjcNHaurp1o"}},{"cell_type":"markdown","source":["Q(estado,ação) = R(estado,ação) + learning_rate * MAX(Q(prox_estado, todas ações))"],"metadata":{"id":"dlpD61_z572c"}},{"cell_type":"code","source":["def updateQ(random_state, random_action):\n","  aux = []\n","  for x in range(n_cols):\n","    if R[random_action,x] != -1:\n","      aux.append(Q[random_action,x])\n","  Q[random_state,random_action] = R[random_state,random_action] + learning_rate*max(aux)\n","\n","def simplify_matrix(Q):\n","  max_value = max_matrix(Q)/100\n","  for i in range(n_rows):\n","    for j in range(n_cols):\n","      if Q[i,j] != -1:\n","          Q[i,j] = Q[i,j]/max_value\n","  return Q\n","\n","def max_matrix(Q):\n","  aux = []\n","  for i in range(n_rows):\n","    for j in range(n_cols):\n","      aux.append(Q[i,j])\n","\n","  return max(aux)"],"metadata":{"id":"miVVXbI36aY7","executionInfo":{"status":"ok","timestamp":1670518774394,"user_tz":180,"elapsed":25,"user":{"displayName":"DANIEL AUGUSTO MULLER","userId":"11187782989166260607"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["learning_rate = 0.8\n","\n","#Exemplo do Slide\n","n_cols = 6\n","n_rows = 6\n","\n","# criando Matrix R de recompensas zerada\n","R = [[-1,-1,-1,-1,0,-1],\n","     [-1,-1,-1,0,-1,100],\n","     [-1,-1,-1,0,-1,-1],\n","     [-1,0,0,-1,0,-1],\n","     [0,-1,-1,0,-1,100],\n","     [-1,0,-1,-1,0,100]]\n","\n","R = np.array(R)\n","print(\"Matrix R: \\n\", R)\n","\n","Q = np.zeros((n_rows, n_cols), dtype=np.int32) # criando Matrix Q zerada\n","num_episodes = 1000\n","\n","for x in range(num_episodes):\n","  # selecionar estado randômico\n","  random_state = np.random.randint(n_cols) # 0 a n_cols\n","  random_action = np.random.randint(n_rows) # 0 a n_rows\n","  #print(\"Início aleatório em Q(\", random_state ,\",\", random_action ,\")\")\n","  updateQ(random_state, random_action)\n","\n","print(\"\\nMatrix Q:\\n\", Q)\n","\n","Q_simplified = simplify_matrix(Q)\n","\n","print(\"\\nMatrix Q_simplified:\\n\", Q_simplified)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oEtyjyGkINo_","executionInfo":{"status":"ok","timestamp":1670518774395,"user_tz":180,"elapsed":23,"user":{"displayName":"DANIEL AUGUSTO MULLER","userId":"11187782989166260607"}},"outputId":"83c85d81-0317-451b-cf5f-32013ae6205b"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Matrix R: \n"," [[ -1  -1  -1  -1   0  -1]\n"," [ -1  -1  -1   0  -1 100]\n"," [ -1  -1  -1   0  -1  -1]\n"," [ -1   0   0  -1   0  -1]\n"," [  0  -1  -1   0  -1 100]\n"," [ -1   0  -1  -1   0 100]]\n","\n","Matrix Q:\n"," [[315 395 251 315 396 395]\n"," [315 395 251 316 395 496]\n"," [315 395 251 316 395 395]\n"," [315 396 252 315 396 395]\n"," [316 395 251 316 395 496]\n"," [315 396 251 315 396 496]]\n","\n","Matrix Q_simplified:\n"," [[ 63  79  50  63  79  79]\n"," [ 63  79  50  63  79 100]\n"," [ 63  79  50  63  79  79]\n"," [ 63  79  50  63  79  79]\n"," [ 63  79  50  63  79 100]\n"," [ 63  79  50  63  79 100]]\n"]}]},{"cell_type":"markdown","source":["**Robot Game**"],"metadata":{"id":"g6WfgHLij8U3"}},{"cell_type":"code","source":["def updateQ_robotGame(n_cols, random_state, random_action, learning_rate, alfa):\n","  aux = []\n","  for x in range(n_cols):\n","    if R[random_action,x] != -100:\n","      aux.append(Q[random_action,x])\n","  Q[random_state,random_action] = Q[random_state,random_action] + alfa*(R[random_state,random_action] + learning_rate*max(aux) - Q[random_state,random_action])"],"metadata":{"id":"DN7meCHukKup","executionInfo":{"status":"ok","timestamp":1670518774398,"user_tz":180,"elapsed":17,"user":{"displayName":"DANIEL AUGUSTO MULLER","userId":"11187782989166260607"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["learning_rate = 0.8\n","alfa = 0.1\n","\n","#Exemplo do Slide\n","n_cols = 4\n","n_rows = 5\n","\n","# criando Matrix R de recompensas zerada\n","R = [[0,0,0,1,0,0],\n","     [0,-100,0,0,-100,0],\n","     [0,0,1,0,0,1],\n","     [-100,0,0,-100,0,0],\n","     [0,1,0,0,100,0]]\n","\n","R = np.array(R)\n","print(\"Matrix R: \\n\", R)\n","\n","Q = np.zeros((n_rows, n_cols), dtype=np.int32) # criando Matrix Q zerada\n","num_episodes = 1000\n","\n","for x in range(num_episodes):\n","  # selecionar estado randômico\n","  random_state = np.random.randint(n_cols) # 0 a n_cols\n","  random_action = np.random.randint(n_rows) # 0 a n_rows\n","  #print(\"Início aleatório em Q(\", random_state ,\",\", random_action ,\")\")\n","  updateQ_robotGame(n_cols, random_state, random_action, learning_rate, alfa)\n","\n","print(\"Matrix Q:\\n\", Q)\n","\n","Q_simplified = simplify_matrix(Q)\n","\n","print(\"\\nMatrix Q_simplified:\\n\", Q_simplified)"],"metadata":{"id":"gQXTrqnxk3CO"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"1NA3Bo_RVSaMR5gv0KScuo6r2JAUGY2mh","timestamp":1668100145258},{"file_id":"1GxWa45v1DnN5Tl4IUG0wjVoL5gZa16X2","timestamp":1666890742617},{"file_id":"1Tsa1tYrCdXCeKym1pePGGPP2RJjKqJJ2","timestamp":1664548752772},{"file_id":"1s8FkFr_SA6gpoAcFLFCnjX4148aCddpO","timestamp":1664474054557},{"file_id":"1X8-g2wGmbibvOCOeqVg8HC8vo2YWKBdW","timestamp":1663866335850}]},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}